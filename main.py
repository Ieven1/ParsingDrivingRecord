from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, StaleElementReferenceException
import sqlite3
import time
import schedule
from threading import Thread
from telebot import TeleBot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_TOKEN, CHAT_ID, PHONE, PASSWORD
from datetime import datetime

calendar_url = "https://www.lk.oz-avtoschool.ru/driving-record"
DB_PATH = "schedule.db"

state_storage = StateMemoryStorage()
bot = TeleBot(TELEGRAM_TOKEN, state_storage=state_storage)
last_message_id = None

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            date TEXT,
            time TEXT,
            PRIMARY KEY (date, time)
        )
    """)
    conn.commit()
    conn.close()

def send_or_update_telegram_message(message, update=False):
    global last_message_id
    try:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update_schedule"))

        if update and last_message_id:
            try:
                bot.edit_message_text(
                    text=message,
                    chat_id=CHAT_ID,
                    message_id=last_message_id,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Telegram")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                sent_message = bot.send_message(CHAT_ID, message, reply_markup=markup, parse_mode="Markdown")
                last_message_id = sent_message.message_id
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
        else:
            sent_message = bot.send_message(CHAT_ID, message, reply_markup=markup, parse_mode="Markdown")
            last_message_id = sent_message.message_id
            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def fetch_schedule():
    options = webdriver.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--headless")
    driver = webdriver.Chrome(options=options)
    wait = WebDriverWait(driver, 10)

    results = {}
    try:
        driver.get(calendar_url)
        wait.until(EC.presence_of_element_located((By.ID, "student-phone"))).send_keys(PHONE)
        wait.until(EC.presence_of_element_located((By.ID, "student-password"))).send_keys(PASSWORD)
        wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))).click()
        print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        calendar_link = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "a.nav-link[href='/driving-record']")))
        calendar_link.click()
        print("–û—Ç–∫—Ä—ã—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å")

        checked_dates = set()
        max_attempts = 10
        attempt = 0

        while attempt < max_attempts:
            attempt += 1
            try:
                date_input = wait.until(EC.element_to_be_clickable((By.ID, "drivingschedule-date")))
                date_input.click()
                wait.until(EC.visibility_of_element_located((By.ID, "ui-datepicker-div")))
            except TimeoutException:
                print("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                break

            try:
                calendar = wait.until(EC.presence_of_element_located((By.ID, "ui-datepicker-div")))
                available_dates = calendar.find_elements(By.CSS_SELECTOR, "td[data-handler='selectDay'] a.ui-state-default")
                if not available_dates:
                    print("–î–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    break

                print(f"–ù–∞–π–¥–µ–Ω–æ {len(available_dates)} –¥–∞—Ç")
                found_new_date = False
                for date in available_dates:
                    try:
                        date_text = date.text
                        if date_text in checked_dates:
                            continue
                        found_new_date = True
                        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É: {date_text}")
                        checked_dates.add(date_text)

                        date.click()
                        try:
                            time_select = wait.until(EC.element_to_be_clickable((By.ID, "drivingschedule-id_time_period")))
                            time_select.click()
                            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#drivingschedule-id_time_period option[value]:not([value=''])")))
                            options = time_select.find_elements(By.TAG_NAME, "option")
                            available_times = [option.text for option in options if option.get_attribute("value") and option.text != "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è"]
                            results[date_text] = available_times if available_times else ["–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"]
                        except TimeoutException:
                            results[date_text] = ["–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"]

                        driver.get(calendar_url)
                        wait.until(EC.element_to_be_clickable((By.ID, "drivingschedule-date")))
                        break
                    except StaleElementReferenceException:
                        print(f"–î–∞—Ç–∞ {date_text} —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...")
                        driver.get(calendar_url)
                        break

                if not found_new_date or len(checked_dates) >= len(available_dates):
                    print("–í—Å–µ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                    break

            except TimeoutException:
                print("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è")
                break

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        send_or_update_telegram_message(f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*:\n```{str(e)}```")
    finally:
        driver.quit()

    return results

def fetch_my_schedule():
    options = webdriver.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--headless")
    driver = webdriver.Chrome(options=options)
    wait = WebDriverWait(driver, 10)

    results = []
    try:
        driver.get(calendar_url)
        wait.until(EC.presence_of_element_located((By.ID, "student-phone"))).send_keys(PHONE)
        wait.until(EC.presence_of_element_located((By.ID, "student-password"))).send_keys(PASSWORD)
        wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))).click()
        print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        calendar_link = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "a.nav-link[href='/driving-record']")))
        calendar_link.click()
        print("–û—Ç–∫—Ä—ã—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å")

        try:
            schedule_table = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "table.table-hover")))
            rows = schedule_table.find_elements(By.TAG_NAME, "tr")
            for row in rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                cols = row.find_elements(By.TAG_NAME, "td")
                if len(cols) >= 2:
                    date_time = cols[0].text.split('\n')  # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                    date = date_time[0] if date_time else ""
                    time = date_time[1] if len(date_time) > 1 else ""
                    location = cols[1].text
                    if date and time:
                        results.append((date, time, location))
        except TimeoutException:
            print("–¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            results.append(("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π", ""))

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        results.append(("–û—à–∏–±–∫–∞", str(e), ""))
    finally:
        driver.quit()

    return results

def check_and_notify():
    new_results = fetch_schedule()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT date, time FROM schedule")
    old_schedule = {(row[0], row[1]) for row in cursor.fetchall()}

    new_schedule = {(comp_date, time) for comp_date, times in new_results.items() for time in times if time != "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"}

    new_slots = new_schedule - old_schedule
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    if new_slots:
        message = f"üîî *–ù–æ–≤—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤–æ–∂–¥–µ–Ω–∏—è* ({current_time}):\n```\n"
        for date, time in sorted(new_slots):
            message += f"üìÖ {date} –∏—é–Ω—è –≤ üïí {time}\n"
        message += "```\n_–ó–∞–ø–∏—à–∏—Ç–µ—Å—å, –ø–æ–∫–∞ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã!_"
        send_or_update_telegram_message(message)

    cursor.execute("DELETE FROM schedule")
    for date, times in new_results.items():
        for time in times:
            if time != "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏":
                cursor.execute("INSERT INTO schedule (date, time) VALUES (?, ?)", (date, time))
    conn.commit()
    conn.close()

    message = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤* ({current_time}):\n```\n"
    if new_results:
        for date, times in sorted(new_results.items()):
            time_str = ", ".join(times) if times != ["–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"] else "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"
            message += f"üìÖ {date} –∏—é–Ω—è: üïí {time_str}\n"
        message += "```"
    else:
        message += "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤\n```"
    message += "\n_–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤._"
    send_or_update_telegram_message(message, update=True)

@bot.message_handler(commands=['update'])
def handle_update(message):
    if str(message.chat.id) != CHAT_ID:
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    bot.reply_to(message, "üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    check_and_notify()

@bot.message_handler(commands=['myschedule'])
def handle_my_schedule(message):
    if str(message.chat.id) != CHAT_ID:
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    bot.reply_to(message, "üîÑ –ü–æ–ª—É—á–∞—é –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    schedule = fetch_my_schedule()
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    if schedule and schedule[0][0] != "–û—à–∏–±–∫–∞" and schedule[0][0] != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
        text = f"üìÖ *–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∂–¥–µ–Ω–∏—è* ({current_time}):\n```\n"
        for date, time, location in sorted(schedule):
            text += f"üìÖ {date} –≤ üïí {time}: üìç {location}\n"
    else:
        text = f"üòî *–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π* ({current_time})\n\n_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é /update._ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π_"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "update_schedule")
def handle_update_button(call):
    if str(call.message.chat.id) != CHAT_ID:
        bot.answer_callback_query(call.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    bot.answer_callback_query(call.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    check_and_notify()

def run_bot():
    bot.polling(none_stop=True)

def run_scheduler():
    schedule.every(6).hours.do(check_and_notify)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    init_db()
    Thread(target=run_bot).start()
    Thread(target=run_scheduler).start()